{"version":3,"file":"torusUtils-node.js","mappings":"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","sources":["webpack://@toruslabs/torus.js/external commonjs \"node-fetch\"","webpack://@toruslabs/torus.js/webpack/bootstrap","webpack://@toruslabs/torus.js/webpack/runtime/compat get default export","webpack://@toruslabs/torus.js/webpack/runtime/define property getters","webpack://@toruslabs/torus.js/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/torus.js/webpack/runtime/make namespace object","webpack://@toruslabs/torus.js/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/torus.js/external commonjs \"@toruslabs/eccrypto\"","webpack://@toruslabs/torus.js/external commonjs \"lodash.merge\"","webpack://@toruslabs/torus.js/external commonjs \"loglevel\"","webpack://@toruslabs/torus.js/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js","webpack://@toruslabs/torus.js/external commonjs \"bn.js\"","webpack://@toruslabs/torus.js/external commonjs \"elliptic\"","webpack://@toruslabs/torus.js/external commonjs \"json-stable-stringify\"","webpack://@toruslabs/torus.js/external commonjs \"web3-utils\"","webpack://@toruslabs/torus.js/./src/loglevel.ts","webpack://@toruslabs/torus.js/./src/some.ts","webpack://@toruslabs/torus.js/external commonjs \"keccak\"","webpack://@toruslabs/torus.js/./src/utils.ts","webpack://@toruslabs/torus.js/./src/torus.ts","webpack://@toruslabs/torus.js/./src/index.ts"],"sourcesContent":["module.exports = require(\"node-fetch\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","import loglevel from \"loglevel\";\n\nconst log = loglevel.getLogger(\"torus.js\");\nlog.disableAll();\n\nexport default log;\n","function capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport class SomeError<T> extends Error {\n  errors: Error[];\n\n  responses: T[];\n\n  predicate: string;\n\n  constructor({ errors, responses, predicate }: { errors: Error[]; responses: T[]; predicate: string }) {\n    super(\"Unable to resolve enough promises.\");\n    this.errors = errors;\n    this.responses = responses;\n    this.predicate = predicate;\n  }\n}\n\nexport const Some = <K, T>(promises: Promise<K>[], predicate: (resultArr: K[], { resolved }: { resolved: boolean }) => Promise<T>): Promise<T> =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0;\n    const sharedState = { resolved: false };\n    const errorArr: Error[] = new Array(promises.length).fill(undefined);\n    const resultArr: K[] = new Array(promises.length).fill(undefined);\n    let predicateError: Error | string;\n    return promises.forEach((x, index) => {\n      return (\n        x\n          .then((resp: K) => {\n            resultArr[index] = resp;\n            return undefined;\n          })\n          .catch((error: Error) => {\n            errorArr[index] = error;\n          })\n          // eslint-disable-next-line promise/no-return-in-finally\n          .finally(() => {\n            if (sharedState.resolved) return;\n            return predicate(resultArr.slice(0), sharedState)\n              .then((data) => {\n                sharedState.resolved = true;\n                resolve(data);\n                return undefined;\n              })\n              .catch((error) => {\n                // log only the last predicate error\n                predicateError = error;\n              })\n              .finally(() => {\n                finishedCount += 1;\n                if (finishedCount === promises.length) {\n                  const errors = Object.values(\n                    resultArr.reduce((acc: Record<string, string>, z) => {\n                      if (z) {\n                        const { id, error } = z as { id?: string; error?: { data?: string } };\n                        if (error?.data?.length > 0) {\n                          if (error.data.startsWith(\"Error occurred while verifying params\")) acc[id] = capitalizeFirstLetter(error.data);\n                          else acc[id] = error.data;\n                        }\n                      }\n                      return acc;\n                    }, {})\n                  );\n\n                  if (errors.length > 0) {\n                    // Format-able errors\n                    const msg = errors.length > 1 ? `\\n${errors.map((it) => `• ${it}`).join(\"\\n\")}` : errors[0];\n                    reject(new Error(msg));\n                  } else {\n                    reject(\n                      new SomeError({\n                        errors: errorArr,\n                        responses: resultArr,\n                        predicate: (predicateError as Error)?.message || (predicateError as string),\n                      })\n                    );\n                  }\n                }\n              });\n          })\n      );\n    });\n  });\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"keccak\");","import { generateJsonRPCObject, post } from \"@toruslabs/http-helpers\";\nimport JsonStringify from \"json-stable-stringify\";\nimport createKeccakHash from \"keccak\";\n\nimport { JRPCResponse, KeyAssignInput, KeyLookupResult, SignerResponse, VerifierLookupResponse } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\n\nexport class GetOrSetNonceError extends Error {}\n\nexport const kCombinations = (s: number | number[], k: number): number[][] => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({ length: set }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [] as number[][]);\n  }\n\n  const combs: number[][] = [];\n  let tailCombs: number[][] = [];\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n\n  return combs;\n};\n\nexport const thresholdSame = <T>(arr: T[], t: number): T | undefined => {\n  const hashMap: Record<string, number> = {};\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n  return undefined;\n};\n\nexport const keyLookup = async (endpoints: string[], verifier: string, verifierId: string): Promise<KeyLookupResult> => {\n  const lookupPromises = endpoints.map((x) =>\n    post<JRPCResponse<VerifierLookupResponse>>(\n      x,\n      generateJsonRPCObject(\"VerifierLookupRequest\", {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error(\"lookup request failed\", err))\n  );\n  return Some<void | JRPCResponse<VerifierLookupResponse>, KeyLookupResult>(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1);\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    );\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    );\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult });\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));\n  });\n};\n\nexport const waitKeyLookup = (endpoints: string[], verifier: string, verifierId: string, timeout: number): Promise<KeyLookupResult> =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n    }, timeout);\n  });\n\nexport const keyAssign = async ({\n  endpoints,\n  torusNodePubs,\n  lastPoint,\n  firstPoint,\n  verifier,\n  verifierId,\n  signerHost,\n  network,\n}: KeyAssignInput): Promise<void> => {\n  let nodeNum: number;\n  let initialPoint: number | undefined;\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length);\n    initialPoint = nodeNum;\n  } else {\n    nodeNum = lastPoint % endpoints.length;\n  }\n  if (nodeNum === firstPoint) throw new Error(\"Looped through all\");\n  if (firstPoint !== undefined) initialPoint = firstPoint;\n\n  const data = generateJsonRPCObject(\"KeyAssign\", {\n    verifier,\n    verifier_id: verifierId.toString(),\n  });\n  try {\n    const signedData = await post<SignerResponse>(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n          network,\n        },\n      },\n      { useAPIKey: true }\n    );\n    return await post<void>(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n      }\n    );\n  } catch (error) {\n    log.error(error);\n    const acceptedErrorMsgs = [\n      // Slow node\n      \"Timed out\",\n      // Happens when the node is not reachable (dns issue etc)\n      \"TypeError: Failed to fetch\", // All except iOS and Firefox\n      \"TypeError: cancelled\", // iOS\n      \"TypeError: NetworkError when attempting to fetch resource.\", // Firefox\n    ];\n    if (acceptedErrorMsgs.includes(error.message))\n      return keyAssign({ endpoints, torusNodePubs, lastPoint: nodeNum + 1, firstPoint: initialPoint, verifier, verifierId, signerHost, network });\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || \"\"}`\n    );\n  }\n};\n\nexport function keccak256(a: string | Buffer): string {\n  const hash = createKeccakHash(\"keccak256\").update(a).digest().toString(\"hex\");\n  return `0x${hash}`;\n}\n","import { decrypt, generatePrivate, getPublic } from \"@toruslabs/eccrypto\";\nimport type { INodePub } from \"@toruslabs/fetch-node-details\";\nimport { Data, generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { curve, ec as EC } from \"elliptic\";\nimport stringify from \"json-stable-stringify\";\nimport { toChecksumAddress } from \"web3-utils\";\n\nimport {\n  CommitmentRequestResult,\n  GetOrSetNonceResult,\n  JRPCResponse,\n  MetadataParams,\n  RetrieveSharesResponse,\n  SetCustomKeyOptions,\n  ShareRequestResult,\n  TorusCtorOptions,\n  TorusPublicKey,\n  V1UserTypeAndAddress,\n  V2UserTypeAndAddress,\n  VerifierLookupResponse,\n  VerifierParams,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\nimport { GetOrSetNonceError, kCombinations, keccak256, keyAssign, keyLookup, thresholdSame, waitKeyLookup } from \"./utils\";\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  public metadataHost: string;\n\n  public allowHost: string;\n\n  public serverTimeOffset: number;\n\n  public enableOneKey: boolean;\n\n  public signerHost: string;\n\n  public network: string;\n\n  protected ec: EC;\n\n  constructor({\n    enableOneKey = false,\n    metadataHost = \"https://metadata.tor.us\",\n    allowHost = \"https://signer.tor.us/api/allow\",\n    signerHost = \"https://signer.tor.us/api/sign\",\n    serverTimeOffset = 0,\n    network = \"mainnet\",\n  }: TorusCtorOptions = {}) {\n    this.ec = new EC(\"secp256k1\");\n    this.metadataHost = metadataHost;\n    this.allowHost = allowHost;\n    this.enableOneKey = enableOneKey;\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n    this.signerHost = signerHost;\n    this.network = network;\n  }\n\n  static enableLogging(v = true): void {\n    if (v) log.enableAll();\n    else log.disableAll();\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  static isGetOrSetNonceError(err: unknown): boolean {\n    return err instanceof GetOrSetNonceError;\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   */\n  async getUserTypeAndAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    doesKeyAssign = false\n  ): Promise<V1UserTypeAndAddress | V2UserTypeAndAddress> {\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    let isNewKey = false;\n    let finalKeyResult: VerifierLookupResponse;\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      if (!doesKeyAssign) {\n        throw new Error(\"Verifier + VerifierID has not yet been assigned\");\n      }\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    if (finalKeyResult) {\n      const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n      let nonceResult: GetOrSetNonceResult;\n      let nonce: BN;\n      let modifiedPubKey: curve.base.BasePoint;\n\n      try {\n        nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n        nonce = new BN(nonceResult.nonce || \"0\", 16);\n      } catch {\n        throw new GetOrSetNonceError();\n      }\n      if (nonceResult.typeOfUser === \"v1\") {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      } else if (nonceResult.typeOfUser === \"v2\") {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n      } else {\n        throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n      }\n      const finalX = modifiedPubKey.getX().toString(16);\n      const finalY = modifiedPubKey.getY().toString(16);\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      if (nonceResult.typeOfUser === \"v1\") return { typeOfUser: nonceResult.typeOfUser, nonce, X: finalX, Y: finalY, address };\n      else if (nonceResult.typeOfUser === \"v2\") {\n        return {\n          typeOfUser: nonceResult.typeOfUser,\n          nonce,\n          pubNonce: nonceResult.pubNonce,\n          upgraded: nonceResult.upgraded,\n          X: finalX,\n          Y: finalY,\n          address,\n        };\n      }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  async setCustomKey({ privKeyHex, metadataNonce, torusKeyHex, customKeyHex }: SetCustomKeyOptions): Promise<void> {\n    let torusKey: BN;\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16);\n    } else {\n      const privKey = new BN(privKeyHex as string, 16);\n      torusKey = privKey.sub(metadataNonce as BN).umod(this.ec.curve.n);\n    }\n    const customKey = new BN(customKeyHex, 16);\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n);\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey);\n    await this.setMetadata(data);\n  }\n\n  async retrieveShares(\n    endpoints: string[],\n    indexes: number[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<RetrieveSharesResponse> {\n    const promiseArr = [];\n    await get<void>(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifier_id: verifierParams.verifier_id,\n          network: this.network,\n        },\n      },\n      { useAPIKey: true }\n    );\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate();\n    const pubKey = getPublic(tmpKey).toString(\"hex\");\n    const pubKeyX = pubKey.slice(2, 66);\n    const pubKeyY = pubKey.slice(66);\n    const tokenCommitment = keccak256(idToken);\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post<JRPCResponse<CommitmentRequestResult>>(\n        endpoints[i],\n        generateJsonRPCObject(\"CommitmentRequest\", {\n          messageprefix: \"mug00\",\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => {\n        log.error(\"commitment\", err);\n      });\n      promiseArr.push(p);\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some<void | JRPCResponse<CommitmentRequestResult>, (void | JRPCResponse<CommitmentRequestResult>)[]>(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n        if (x.error) {\n          return false;\n        }\n        return true;\n      });\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr);\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n    })\n      .then((responses) => {\n        const promiseArrRequest: Promise<void | JRPCResponse<ShareRequestResult>>[] = [];\n        const nodeSigs = [];\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push((responses[i] as JRPCResponse<CommitmentRequestResult>).result);\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          // eslint-disable-next-line promise/no-nesting\n          const p = post<JRPCResponse<ShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(\"ShareRequest\", {\n              encrypted: \"yes\",\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        }\n        return Some<void | JRPCResponse<ShareRequestResult>, BN | undefined>(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x);\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          );\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises: Promise<void | Buffer>[] = [];\n            const nodeIndexes: BN[] = [];\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              const currentShareResponse = shareResponses[i] as JRPCResponse<ShareRequestResult>;\n              if (currentShareResponse?.result?.keys?.length > 0) {\n                currentShareResponse.result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)));\n                const firstKey = currentShareResponse.result.keys[0];\n                if (firstKey.Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(firstKey.Metadata.ephemPublicKey, \"hex\"),\n                    iv: Buffer.from(firstKey.Metadata.iv, \"hex\"),\n                    mac: Buffer.from(firstKey.Metadata.mac, \"hex\"),\n                    // mode: Buffer.from(firstKey.Metadata.mode, \"hex\"),\n                  };\n                  sharePromises.push(\n                    // eslint-disable-next-line promise/no-nesting\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(Buffer.from(firstKey.Share, \"base64\").toString(\"binary\").padStart(64, \"0\"), \"hex\"),\n                    }).catch((err) => log.debug(\"share decryption\", err))\n                  );\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(firstKey.Share.padStart(64, \"0\"), \"hex\")));\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined));\n              }\n              nodeIndexes.push(new BN(indexes[i], 16));\n            }\n            const sharesResolved = await Promise.all(sharePromises);\n            if (sharedState.resolved) return undefined;\n\n            const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndexes[index], value: new BN(curr) });\n              return acc;\n            }, [] as { index: BN; value: BN }[]);\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n            let privateKey: BN | null = null;\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j];\n              const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index));\n              const shares = currentCombiShares.map((x) => x.value);\n              const indices = currentCombiShares.map((x) => x.index);\n              const derivedPrivateKey = this.lagrangeInterpolation(shares, indices);\n              if (!derivedPrivateKey) continue;\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n              const decryptedPubKeyY = decryptedPubKey.slice(66);\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey;\n                break;\n              }\n            }\n            if (privateKey === undefined || privateKey === null) {\n              throw new Error(\"could not derive private key\");\n            }\n            return privateKey;\n          }\n          throw new Error(\"invalid\");\n        });\n      })\n      .then(async (returnedKey) => {\n        let privateKey = returnedKey;\n        if (!privateKey) throw new Error(\"Invalid private key returned\");\n        const decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n        const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n        const decryptedPubKeyY = decryptedPubKey.slice(66);\n        let metadataNonce: BN;\n        if (this.enableOneKey) {\n          const { nonce } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey);\n          metadataNonce = new BN(nonce || \"0\", 16);\n        } else {\n          metadataNonce = await this.getMetadata({ pub_key_X: decryptedPubKeyX, pub_key_Y: decryptedPubKeyY });\n        }\n        log.debug(\"> torus.js/retrieveShares\", { privKey: privateKey.toString(16), metadataNonce: metadataNonce.toString(16) });\n\n        privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n);\n\n        const ethAddress = this.generateAddressFromPrivKey(privateKey);\n        log.debug(\"> torus.js/retrieveShares\", { ethAddress, privKey: privateKey.toString(16) });\n\n        // return reconstructed private key and ethereum address\n        return {\n          ethAddress,\n          privKey: privateKey.toString(\"hex\", 64),\n          metadataNonce,\n        };\n      });\n  }\n\n  async getMetadata(data: Omit<MetadataParams, \"set_data\" | \"signature\">, options: RequestInit = {}): Promise<BN> {\n    try {\n      const metadataResponse = await post<{ message?: string }>(`${this.metadataHost}/get`, data, options, { useAPIKey: true });\n      if (!metadataResponse || !metadataResponse.message) {\n        return new BN(0);\n      }\n      return new BN(metadataResponse.message, 16); // nonce\n    } catch (error) {\n      log.error(\"get metadata error\", error);\n      return new BN(0);\n    }\n  }\n\n  generateMetadataParams(message: string, privateKey: BN): MetadataParams {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64));\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    };\n    const sig = key.sign(keccak256(stringify(setData)).slice(2));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\"),\n    };\n  }\n\n  async setMetadata(data: MetadataParams, options: RequestInit = {}): Promise<string> {\n    try {\n      const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/set`, data, options, { useAPIKey: true });\n      return metadataResponse.message; // IPFS hash\n    } catch (error) {\n      log.error(\"set metadata error\", error);\n      return \"\";\n    }\n  }\n\n  lagrangeInterpolation(shares: BN[], nodeIndex: BN[]): BN | null {\n    if (shares.length !== nodeIndex.length) {\n      return null;\n    }\n    let secret = new BN(0);\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1);\n      let lower = new BN(1);\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg());\n          upper = upper.umod(this.ec.curve.n);\n          let temp = nodeIndex[i].sub(nodeIndex[j]);\n          temp = temp.umod(this.ec.curve.n);\n          lower = lower.mul(temp).umod(this.ec.curve.n);\n        }\n      }\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n);\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n);\n      secret = secret.add(delta);\n    }\n    return secret.umod(this.ec.curve.n);\n  }\n\n  generateAddressFromPrivKey(privateKey: BN): string {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64), \"hex\");\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(publicKey, \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  generateAddressFromPubKey(publicKeyX: BN, publicKeyY: BN): string {\n    const key = this.ec.keyFromPublic({ x: publicKeyX.toString(\"hex\", 64), y: publicKeyY.toString(\"hex\", 64) });\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(key.getPublic().encode(\"hex\", false), \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  /**\n   * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n   */\n  async getPublicAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    isExtended = false\n  ): Promise<string | TorusPublicKey> {\n    log.debug(\"> torus.js/getPublicAddress\", { endpoints, torusNodePubs, verifier, verifierId, isExtended });\n\n    let finalKeyResult: VerifierLookupResponse | undefined;\n    let isNewKey = false;\n\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getPublicAddress\", { finalKeyResult, isNewKey });\n\n    if (finalKeyResult) {\n      let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n      let nonceResult: GetOrSetNonceResult;\n      let nonce: BN;\n      let modifiedPubKey: curve.base.BasePoint;\n      let typeOfUser: GetOrSetNonceResult[\"typeOfUser\"];\n      let pubNonce: { x: string; y: string } | undefined;\n      if (this.enableOneKey) {\n        try {\n          nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n          nonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n        } catch {\n          throw new GetOrSetNonceError();\n        }\n        if (nonceResult.typeOfUser === \"v1\") {\n          modifiedPubKey = this.ec\n            .keyFromPublic({ x: X, y: Y })\n            .getPublic()\n            .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n        } else if (nonceResult.typeOfUser === \"v2\") {\n          if (nonceResult.upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n          } else {\n            modifiedPubKey = this.ec\n              .keyFromPublic({ x: X, y: Y })\n              .getPublic()\n              .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n            pubNonce = nonceResult.pubNonce;\n          }\n        } else {\n          throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n        }\n      } else {\n        typeOfUser = \"v1\";\n        nonce = await this.getMetadata({ pub_key_X: X, pub_key_Y: Y });\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      }\n\n      X = modifiedPubKey.getX().toString(16);\n      Y = modifiedPubKey.getY().toString(16);\n\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      log.debug(\"> torus.js/getPublicAddress\", { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce });\n\n      if (!isExtended) return address;\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce,\n      };\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n  async getOrSetNonce(X: string, Y: string, privKey?: BN, getOnly = false): Promise<GetOrSetNonceResult> {\n    let data: Data;\n    const msg = getOnly ? \"getNonce\" : \"getOrSetNonce\";\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey);\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: { data: msg },\n      };\n    }\n    return post<GetOrSetNonceResult>(`${this.metadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true });\n  }\n\n  async getNonce(X: string, Y: string, privKey?: BN): Promise<GetOrSetNonceResult> {\n    return this.getOrSetNonce(X, Y, privKey, true);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    const privKeyBN = new BN(privKey, 16);\n    const nonceBN = new BN(nonce, 16);\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString(\"hex\");\n  }\n}\n\nexport default Torus;\n","export * from \"./interfaces\";\nexport { default } from \"./torus\";\nexport * from \"./utils\";\n"],"names":["loglevel","log","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","Error","constructor","errors","responses","predicate","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","Object","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","generateJsonRPCObject","post","JsonStringify","createKeccakHash","GetOrSetNonceError","kCombinations","s","k","set","from","_","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","keyLookup","endpoints","verifier","verifierId","lookupPromises","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","network","nodeNum","initialPoint","Math","floor","random","signedData","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","acceptedErrorMsgs","includes","keccak256","a","hash","update","digest","decrypt","generatePrivate","getPublic","get","setAPIKey","setEmbedHost","BN","ec","EC","toChecksumAddress","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","enableLogging","v","enableAll","apiKey","embedHost","isGetOrSetNonceError","getUserTypeAndAddress","doesKeyAssign","isNewKey","finalKeyResult","assignResult","pub_key_X","pub_key_Y","keys","nonceResult","nonce","modifiedPubKey","getOrSetNonce","typeOfUser","keyFromPublic","y","add","keyFromPrivate","pubNonce","finalX","getX","finalY","getY","address","generateAddressFromPubKey","upgraded","setCustomKey","privKeyHex","metadataNonce","torusKeyHex","customKeyHex","torusKey","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","retrieveShares","indexes","verifierParams","idToken","extraParams","promiseArr","tmpKey","pubKey","tokenCommitment","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","PublicKey","sharePromises","nodeIndexes","currentShareResponse","sort","b","Index","cmp","firstKey","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","ciphertext","Share","padStart","debug","sharesResolved","all","decryptedShares","curr","value","allCombis","privateKey","currentCombi","currentCombiShares","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","returnedKey","getNonce","getMetadata","ethAddress","generateAddressFromPrivKey","options","metadataResponse","key","setData","timestamp","Date","now","sig","sign","set_data","signature","r","nodeIndex","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","info","ethAddressLower","publicKeyX","publicKeyY","getPublicAddress","isExtended","getOnly","getPostboxKeyFrom1OutOf1","privKeyBN","nonceBN","default"],"sourceRoot":""}